#!/usr/bin/env bash
#
# Copyright 2019 asdf-direnv authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Load asdf util functions if not already loaded
if [ -z "$(declare -f -F with_plugin_env)" ]; then
  ASDF_DIR="${ASDF_DIR:-$(dirname "$(dirname "$(command -v asdf)")")}"
  # shellcheck disable=SC1090 # Can't follow non-constant source. Use a directive to specify location.
  source "$ASDF_DIR/lib/utils.sh"
fi

# Load direnv stdlib if not already loaded
if [ -z "$(declare -f -F watch_file)" ]; then
  eval "$(asdf exec direnv stdlib)"
fi

## Usage: use_asdf [...]
#
# Loads environment variables from `asdf` current tools.
#
# If first argument is a file it is expected to be a path to a .tool-versions file.
# Otherwise two argments are expected, a plugin name and version.
# If no arguments are given, a .tool-versions file will be looked up.
use_asdf() {
  if [ -z "$*" ] || [ "current" == "$*" ]; then
    use_asdf global
    use_asdf local

  elif [ "global" == "$*" ]; then
    eval "$(_load_global_plugins_env "$(_local_versions_file)")"

  elif [ "local" == "$*" ]; then
    eval "$(_load_local_plugins_env "$(_local_versions_file)")"

  elif [ -f "$1" ]; then # [tool-versions file]
    eval "$(_load_local_plugins_env "$1")"

  elif [ -n "$1" ] && [ -z "$2" ]; then # [name] only
    check_if_plugin_exists "$1"
    eval "$(_load_plugin_version_and_file "$1")"

  elif [ -n "$1" ] && [ -n "$2" ]; then # [name] [version]
    check_if_version_exists "$1" "$2"
    eval "$(_plugin_env_bash "$1" "$2")"

  else
    log_error "use asdf: Invalid args. See README.md for some examples."
    return 1
  fi
}

_tail_r() {
  # portable version of tail -r
  cat -n | sort -nr | cut -f2
}

_xargs_par() {
  local nproc="${ASDF_CONCURRENCY:-$(getconf _NPROCESSORS_ONLN || echo 1)}"
  if [ "$nproc" -gt 1 ]; then
    xargs -P "$nproc" "$@"
  else
    xargs "$@"
  fi
}

_pardo() {
  local this_file="${BASH_SOURCE[0]}"
  _xargs_par -L 1 "$this_file" 'do' "$@"
}

_local_versions_file() {
  local tool_versions
  tool_versions="$(find_up .tool-versions)"
  if [ -f "$tool_versions" ]; then
    echo "$tool_versions"
  else
    log_error "could not find .tool-versions file"
    return 1
  fi
}

_plugins_in_file() {
  local tool_versions=$1
  cut -d'#' -f1 "$tool_versions" | cut -d' ' -f1 | awk NF | uniq
}

_all_plugins_list() {
  find "$(get_plugin_path)" -maxdepth 1 -mindepth 1 -exec basename '{}' \; | sort
}

_except_local_plugins_list() {
  local tool_versions=$1
  local tmp_local_plugin_names
  tmp_local_plugin_names="$(mktemp)"
  _plugins_in_file "$tool_versions" >"$tmp_local_plugin_names"
  _all_plugins_list | grep -v -F -f "$tmp_local_plugin_names"
  rm "$tmp_local_plugin_names"
}

_load_global_plugins_env() {
  local tool_versions=$1
  _except_local_plugins_list "$tool_versions" | _tail_r | _pardo _load_plugin_version_and_file
}

_load_local_plugins_env() {
  local tool_versions=$1
  _plugins_in_file "$tool_versions" | _tail_r | _pardo _load_plugin_version_and_file
}

_plugin_env() {
  asdf exec direnv dotenv bash <(env)
}

# from asdf plugin_current_command
_load_plugin_version_and_file() {
  local plugin_name=$1
  local versions_and_path
  versions_and_path="$(find_versions "$plugin_name" "$(pwd)")"
  if test -z "$versions_and_path"; then
    return 0
  fi

  local path
  path=$(cut -d '|' -f 2 <<<"$versions_and_path")
  IFS=$'\n' read -r -a versions <<<"$(cut -d '|' -f 1 <<<"$versions_and_path" | uniq)"
  for version in "${versions[@]}"; do
    _plugin_env_bash "$plugin_name" "$version"
    log_status "using asdf ${plugin_name} ${version}"
  done
  if [ -f "$path" ]; then
    asdf exec direnv watch bash "$path"
  fi
}

_plugin_env_bash() {
  local plugin="${1}"
  local version="${2}"
  local old_path="$PATH"
  if [ -n "$version" ]; then
    with_plugin_env "$plugin" "$version" _plugin_env | sed "s#:$old_path#:'\"\$PATH\"'#"
  fi
}

if [ "do" == "$1" ]; then
  eval "${@:2}"
fi
