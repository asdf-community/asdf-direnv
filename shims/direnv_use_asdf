#!/usr/bin/env bash
#
# Copyright 2019 asdf-direnv authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

if [ -z "$(declare -f -F with_plugin_env)" ]; then
  # shellcheck disable=SC1090 # Can't follow non-constant source. Use a directive to specify location.
  source "$ASDF_DIR/lib/utils.sh"
fi

## Usage: use_asdf [...]
#
# Loads environment variables from `asdf` current tools.
#
# If first argument is a file it is expected to be a path to a .tool-versions file.
# Otherwise two argments are expected, a plugin name and version.
# If no arguments are given, a .tool-versions file will be looked up.
use_asdf() {
  local plugin
  local version
  if [ -z "$*" ]; then
    local tool_versions
    tool_versions="$(find_up .tool-versions)"
    if [ -f "$tool_versions" ]; then
      use asdf "$tool_versions"
    else
      log_error "could not find .tool-versions file" >&2
      return 1
    fi
  elif [ -f "$1" ]; then
    _load_plugins_env "$1"
  elif [ -n "$1" ]; then
    if ! (check_if_plugin_exists "$1"); then
      return 1
    fi
    _load_plugin_env "$1" "$2"
  else
    log_error "Invalid args for use asdf. Usage:"
    log_error "   use asdf TOOL_VERSIONS_FILE"
    log_error "   use asdf TOOL_NAME [VERSION]"
    return 1
  fi
}

_xargs_par() {
  xargs -n 1 -P "$(getconf _NPROCESSORS_ONLN)" "$@"
}

_plugins_in_file() {
  local tool_versions=$1
  cut -d'#' -f1 "$tool_versions" | cut -d' ' -f1 | awk NF
}

_load_plugin_env() {
  eval "$(_plugin_env_bash "$1" "$2")"
}

_load_plugins_env() {
  local tool_versions=$1
  watch_file "$tool_versions"
  eval "$(_plugins_in_file "$tool_versions" | _xargs_par direnv_use_asdf 'do' _plugin_env_bash)"
}

_plugin_env_bash() {
  local plugin=$1
  local version
  local old_path="$PATH"
  version="${2:-$(get_preset_version_for "$plugin")}"
  if [ -z "$version" ]; then
    log_error "asdf: could not find current version for $plugin" >&2
    return 1
  fi

  _plugin_env() {
    echo "log_status using asdf $plugin $version"
    direnv dotenv bash <(
      env | grep -v '^PATH='
      # shellcheck disable=SC2016 # Expressions dont expand in single quotes
      echo "PATH=$PATH"':$PATH' | sed "s#:$old_path##"
    )
  }

  with_plugin_env "$plugin" "$version" _plugin_env
}

if [ "do" == "$1" ]; then
  eval "${@:2}"
fi
